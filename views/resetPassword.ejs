<%- include("templates/header") %>
<head>
    <title><%= language.resetPasswordTitle %></title>
    <link rel="stylesheet" href="/styles/profile.css">
</head>
<%- include("templates/navbar") %>
<div class="container mt-5">
    <header class="d-flex align-items-center mb-4">
        <a id="btn-back" href="/login" class="btn btn-outline-secondary me-3">
            <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M4.65419 7.95837H17.3334V10.0417H4.65419L10.2417 15.6292L8.76877 17.1021L0.666687 9.00003L8.76877 0.897949L10.2417 2.37087L4.65419 7.95837Z"
                      fill="black"/>
            </svg>
        </a>
        <%= language.resetYourPassword %>
    </header>
    <main>
        <form id="resetPasswordForm" class="needs-validation" novalidate>
            <div class="mb-3">
                <label for="newPassword" class="form-label"><%= language.newPassword %>:</label>
                <input name="newPassword" id="newPassword" type="password" class="form-control" required>
                <div class="invalid-feedback">
                    <%= language.pleaseEnterNewPassword %>
                </div>
            </div>
            <button type="submit" id="submitButton" class="btn btn-primary">
                <%= language.submit %>
            </button>
        </form>
        <div id="statusMessage" class="alert" style="display: none; margin-top: 20px;"></div>
    </main>
</div>
<%- include("templates/footer") %>

<script>
    document.getElementById('resetPasswordForm').addEventListener('submit', async function (event) {
        event.preventDefault();

        const form = event.target;
        const newPassword = document.getElementById('newPassword').value;
        const regex = /^(?=.*[a-zA-Z])(?=.*[0-9])[A-Za-z0-9@#*_]{5,25}$/;
        const passwordInvalid = '<%= language.passwordInvalidMessage %>';
        const statusMessage = document.getElementById('statusMessage');
        const submitButton = document.getElementById('submitButton');

        statusMessage.textContent = '';
        statusMessage.style.visibility = 'hidden';
        submitButton.disabled = true;

        setTimeout(() => {
            statusMessage.style.visibility = 'visible';
        }, 100);

        if (!newPassword) {
            statusMessage.innerHTML = '<%= language.inputNewPassword %>';
            statusMessage.style.color = 'orange';
            statusMessage.style.display = 'block';
            submitButton.disabled = false;
        } else if (!regex.test(newPassword)) {
            statusMessage.innerHTML = passwordInvalid;
            statusMessage.style.color = 'red';
            statusMessage.style.display = 'block';
            submitButton.disabled = false;
        } else {
            try {
                const response = await fetch('/reset-password?token=<%= token %>', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({newPassword})
                });

                const data = await response.json();
                if (data.success) {
                    statusMessage.innerHTML = '<%= language.passwordResetSuccess %>';
                    statusMessage.style.color = 'green';
                    statusMessage.style.display = 'block';
                } else {
                    statusMessage.innerHTML = data.message || '<%= language.errorOccurred %>';
                    statusMessage.style.color = 'red';
                    statusMessage.style.display = 'block';
                    document.getElementById('newPassword').value = '';
                    submitButton.disabled = false;
                }
            } catch (err) {
                statusMessage.innerHTML = '<%= language.errorOccurred %>';
                statusMessage.style.color = 'red';
                statusMessage.style.display = 'block';
                document.getElementById('newPassword').value = '';
                submitButton.disabled = false;
            }
        }
    });
</script>
